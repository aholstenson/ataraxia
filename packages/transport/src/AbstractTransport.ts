import { Event } from 'atvik';
import debug from 'debug';

import { encodeId } from './ids';
import { Peer } from './Peer';
import { Transport } from './Transport';
import { TransportOptions } from './TransportOptions';

/**
 * Abstract base for implementing transports. Implements common behavior to
 * help with tracking of peers.
 */
export class AbstractTransport implements Transport {
	private readonly transportName: string;

	private readonly peerConnectEvent: Event<this, [ peer: Peer ]>;

	protected debug: debug.Debugger;

	private _started: boolean;

	protected readonly peers: Set<Peer>;

	private _transportOptions?: TransportOptions;

	/**
	 * Create a new instance.
	 *
	 * @param name -
	 *   name of the transport, should be short and identify, examples from the
	 *   core library include `local`, `tcp` and `hyperswarm`.
	 */
	public constructor(name: string) {
		this.peerConnectEvent = new Event(this);

		this.peers = new Set();

		this._started = false;
		this.transportName = name;
		this.debug = debug('ataraxia:no-network:' + name);
	}

	public get transportOptions() {
		if(! this._transportOptions) {
			throw new Error();
		}

		return this._transportOptions;
	}

	/**
	 * Event for when a new peer is connected via this transport.
	 *
	 * @returns
	 *   `Subscribable` that can be used to register listeners
	 */
	public get onPeerConnect() {
		return this.peerConnectEvent.subscribable;
	}

	/**
	 * Get if transport is started.
	 *
	 * @returns
	 *   `true` if transport is started
	 */
	public get started() {
		return this._started;
	}

	/**
	 * Start this transport.
	 *
	 * @param options -
	 *   options as generated by the network instance
	 * @returns
	 *   boolean indicating if the transport was started
	 */
	public async start(options: TransportOptions): Promise<boolean> {
		if(this._started) {
			return false;
		}

		this.debug = debug('ataraxia:' + options.networkName + ':' + this.transportName);
		this._started = true;
		this._transportOptions = options;

		this.debug('Starting with id ' + encodeId(options.networkId));

		return true;
	}

	/**
	 * Stop this transport.
	 *
	 * @returns
	 *   boolean indicating if the transport was stopped.
	 */
	public async stop(): Promise<boolean> {
		if(! this._started) {
			return false;
		}

		for(const peer of this.peers.values()) {
			peer.disconnect();
		}

		this._started = false;
		return true;
	}

	/**
	 * Add a peer to this transport. This will start monitoring this peer
	 * for connection events and make it available/unavailable as it
	 * connects/disconnects.
	 *
	 * @param peer -
	 *   peer to track
	 */
	protected addPeer(peer: Peer) {
		const onConnect = () => {
			// New peer, connect to it
			this.peers.add(peer);

			this.debug('Peer with id', encodeId(peer.id), 'is now available');
			this.peerConnectEvent.emit(peer);
		};

		peer.onConnect(onConnect);

		peer.onDisconnect(() => {
			this.peers.delete(peer);

			this.debug('Peer with id', encodeId(peer.id), 'is no longer available');
		});

		if(peer.connected) {
			// If adding an already connected peer run connect routine
			onConnect();
		}
	}
}
